import { ROUTES } from "./";

export const MANAGE_PLAN_ROUTES = {
  CREATE_PLAN: `${ROUTES.MANAGE_PLAN}/create-plan`,
  BASIC_DETAILS: `${ROUTES.MANAGE_PLAN}/plan-details`,
  SPONSOR: `${ROUTES.MANAGE_PLAN}/sponsor`,
  ADD_SPONSOR: `${ROUTES.MANAGE_PLAN}/add-sponsor`,
  SPONSOR_INFORMATION: `${ROUTES.MANAGE_PLAN}/sponsor-information`,
  TRUSTEE: `${ROUTES.MANAGE_PLAN}/trustee`,
  ADD_TRUSTEE: `${ROUTES.MANAGE_PLAN}/add-trustee`,
  ADD_TRUSTEE_MASTER: `${ROUTES.MANAGE_PLAN}/add-trustee-master`,
  MANAGE_TRUSTEE: `${ROUTES.MANAGE_PLAN}/manage-trustee`,
  CUSTODIAN: `${ROUTES.MANAGE_PLAN}/custodian`,
  ADD_CUSTODIAN: `${ROUTES.MANAGE_PLAN}/add-custodian`,
  ADD_CUSTODIAN_MASTER: `${ROUTES.MANAGE_PLAN}/add-custodian-master`,
  MANAGE_CUSTODIAN: `${ROUTES.MANAGE_PLAN}/manage-custodian`,
  ADVISOR: `${ROUTES.MANAGE_PLAN}/advisor`,
  ADD_ADVISOR: `${ROUTES.MANAGE_PLAN}/add-advisor`,
  ADD_ADVISOR_MASTER: `${ROUTES.MANAGE_PLAN}/add-advisor-master`,
  MANAGE_ADVISOR: `${ROUTES.MANAGE_PLAN}/manage-advisor`,
  COMPLAINCE: `${ROUTES.MANAGE_PLAN}/complaince`,
  MANAGE_SOURCES: `${ROUTES.MANAGE_PLAN}/manage-sources`,
  MANAGE_SOURCES_MASTER: `${ROUTES.MANAGE_PLAN}/sources-master`,
  MANAGE_SOURCES_NEW: `${ROUTES.MANAGE_PLAN}/sources-new`,
  VIEW_SOURCES_MASTER: `${ROUTES.MANAGE_PLAN}/master-sources-view`,
  MANAGE_SOURCES_HISTORY: `${ROUTES.MANAGE_PLAN}/sources-history`,
  MANAGE_SOURCES_ADD_ADDITIONAL_RULES: `${ROUTES.MANAGE_PLAN}/add-additional-rules`,
  ELIGIBILITY: `${ROUTES.MANAGE_PLAN}/eligibility`,
  ADD_ELIGIBILITY: `${ROUTES.MANAGE_PLAN}/add-eligibility`,
  ADDITIONAL_ELIGIBILITY_RULE: `${ROUTES.MANAGE_PLAN}/additional-eligibility-rule`,
  ALLOCATION: `${ROUTES.MANAGE_PLAN}/allocation`,
  ADD_SOURCE_ALLOCATION: `${ROUTES.MANAGE_PLAN}/add-source-allocation`,
  VESTING: `${ROUTES.MANAGE_PLAN}/vesting`,
  ADD_VESTING: `${ROUTES.MANAGE_PLAN}/add-vesting`,
  ADD_VESTING_RULE: `${ROUTES.MANAGE_PLAN}/add-addtional-vesting-rule`,
  FORFEITURE: `${ROUTES.MANAGE_PLAN}/forfeiture`,
  MANAGE_FUNDING: `${ROUTES.MANAGE_PLAN}/manage-funding`,
  MANAGE_FUNDING_DETAIL: `${ROUTES.MANAGE_PLAN}/funding-detail`,
  MANAGE_RETIREMENT: `${ROUTES.MANAGE_PLAN}/manage-retirement`,
  ENROLLMENT: `${ROUTES.MANAGE_PLAN}/enrollment`,
  ADDITIONAL_AUTO_ENROLLMENT: `${ROUTES.MANAGE_PLAN}/additional-auto-enrollment`,
  ENTRYDATE: `${ROUTES.MANAGE_PLAN}/Entrydate`,
  SOURCE_ENROLLMENT: `${ROUTES.MANAGE_PLAN}/source-enrollment`,
  ROLLOVER: `${ROUTES.MANAGE_PLAN}/rollover`,
  MANAGE_COMPENSATION: `${ROUTES.MANAGE_PLAN}/manage-compensation`,
  MANAGE_PLAN_COMPENSATION_CATEGORY: `${ROUTES.MANAGE_PLAN}/manage-compensation`,
  MANAGE_SOURCE_COMPENSATION: `${ROUTES.MANAGE_PLAN}/source-compensation`,
  DISTRIBUTIONS: `${ROUTES.MANAGE_PLAN}/distributions`,
  ADD_DISTRIBUTIONS: `${ROUTES.MANAGE_PLAN}/add-distributions`,
  TRANSFER: `${ROUTES.MANAGE_PLAN}/transfer`,
  LOANS: `${ROUTES.MANAGE_PLAN}/loans`,
  MANAGE_INVESTMENTS_PLAN: `${ROUTES.MANAGE_PLAN}/manage-investment-plan`,
  MANAGE_INVESTMENTS_MASTER: `${ROUTES.MANAGE_PLAN}/manage-investment-master`,
  ADD_INVESTMENTS: `${ROUTES.MANAGE_PLAN}/add-investments`,
  ADD_INVESTMENTS_RESTRICTIONS: `${ROUTES.MANAGE_PLAN}/add-investment-restrictions`,
  VIEW_INV_ASSOCIATED_PLANS: `${ROUTES.MANAGE_PLAN}/assiciated-plans`,
  VIEW_INV_RESTRICTION_HISTORY: `${ROUTES.MANAGE_PLAN}/restrictions-history`,
  ADD_LOANS: `${ROUTES.MANAGE_PLAN}/add-loans`,
  REVIEW: `${ROUTES.MANAGE_PLAN}/review`,
  IRSLIMIT: `${ROUTES.MANAGE_PLAN}/irslimit`,
};

export const REVIEW_SCREEN_DATA_MAPPING = {
  BASIC_DETAILS: "basicDetails",
  SPONSOR: "sponsor",
  TRUSTEE: "trustee",
  CUSTODIAN: "custodian",
  ADVISOR: "advisor",
  COMPLAINCE: "compliance",
  SOURCES: "sources",
  ELIGIBILITY: "eligibility",
  ALLOCATIONS: "allocations",
  VESTING: "vesting",
  FORFEITURE: "forfeiture",
  FUNDING: "funding",
  ENROLLMENT: "enrollment",
  ENTRYDATE: "entryDate",
  ROLLOVER: "rollover",
  RETIREMENT: "retirement",
  COMPENSATION: "compensation",
  DISTRIBUTIONS: "distributions",
  TRANSFERS: "transfers",
  LOANS: "loans",
  INVESTMENTS: "investments",
  REVIEW: "review",
  IRSLIMIT: `irslimit`,
};

export const MANAGE_PLAN_MENU = [
  {
    id: "plan_name",
    label: "Create Plan",
    path: MANAGE_PLAN_ROUTES.CREATE_PLAN,
    contentHeader: "Create Plan",
    breadCrumbs: [],
    childRoutes: [],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.BASIC_DETAILS,
    label: "Plan Details",
    path: MANAGE_PLAN_ROUTES.BASIC_DETAILS,
    contentHeader: "Plan Details",
    breadCrumbs: [],
    childRoutes: [],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.SPONSOR,
    label: "Sponsor",
    path: MANAGE_PLAN_ROUTES.SPONSOR,
    contentHeader: "Sponsor",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.ADD_SPONSOR,
      MANAGE_PLAN_ROUTES.SPONSOR_INFORMATION,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.TRUSTEE,
    label: "Trustee",
    path: MANAGE_PLAN_ROUTES.TRUSTEE,
    contentHeader: "Manage Trustee",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.ADD_TRUSTEE,
      MANAGE_PLAN_ROUTES.ADD_TRUSTEE_MASTER,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.CUSTODIAN,
    label: "Custodian",
    path: MANAGE_PLAN_ROUTES.CUSTODIAN,
    contentHeader: "Manage Custodian",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.ADD_CUSTODIAN,
      MANAGE_PLAN_ROUTES.ADD_CUSTODIAN_MASTER,
      MANAGE_PLAN_ROUTES.MANAGE_CUSTODIAN,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.ADVISOR,
    label: "Advisor",
    path: MANAGE_PLAN_ROUTES.ADVISOR,
    contentHeader: "Manage Advisor",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.ADD_ADVISOR,
      MANAGE_PLAN_ROUTES.ADD_ADVISOR_MASTER,
      MANAGE_PLAN_ROUTES.MANAGE_ADVISOR,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.COMPLAINCE,
    label: "Compliance",
    path: MANAGE_PLAN_ROUTES.COMPLAINCE,
    contentHeader: "Compliance",
    breadCrumbs: [],
    childRoutes: [],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.SOURCES,
    label: "Sources",
    path: MANAGE_PLAN_ROUTES.MANAGE_SOURCES,
    contentHeader: "Manage Sources",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.MANAGE_SOURCES_MASTER,
      MANAGE_PLAN_ROUTES.MANAGE_SOURCES_NEW,
      MANAGE_PLAN_ROUTES.MANAGE_SOURCES_ADD_ADDITIONAL_RULES,
      MANAGE_PLAN_ROUTES.VIEW_SOURCES_MASTER,
      MANAGE_PLAN_ROUTES.MANAGE_SOURCES_HISTORY,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.ELIGIBILITY,
    label: "Eligibility",
    path: MANAGE_PLAN_ROUTES.ELIGIBILITY,
    contentHeader: "Eligibility",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.ADD_ELIGIBILITY,
      MANAGE_PLAN_ROUTES.ADDITIONAL_ELIGIBILITY_RULE,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.ALLOCATIONS,
    label: "Allocations",
    path: MANAGE_PLAN_ROUTES.ALLOCATION,
    contentHeader: "Allocations",
    breadCrumbs: [],
    childRoutes: [MANAGE_PLAN_ROUTES.ADD_SOURCE_ALLOCATION],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.VESTING,
    label: "Vesting",
    path: MANAGE_PLAN_ROUTES.VESTING,
    contentHeader: "Vesting",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.ADD_VESTING,
      MANAGE_PLAN_ROUTES.ADD_VESTING_RULE,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.FORFEITURE,
    label: "Forfeiture",
    path: MANAGE_PLAN_ROUTES.FORFEITURE,
    contentHeader: "Forfeiture",
    breadCrumbs: [],
    childRoutes: [],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.FUNDING,
    label: "Funding",
    path: MANAGE_PLAN_ROUTES.MANAGE_FUNDING,
    contentHeader: "Funding",
    breadCrumbs: [],
    childRoutes: [MANAGE_PLAN_ROUTES.MANAGE_FUNDING_DETAIL],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.ENROLLMENT,
    label: "Enrollment",
    path: MANAGE_PLAN_ROUTES.ENROLLMENT,
    contentHeader: "Enrollment",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.SOURCE_ENROLLMENT,
      MANAGE_PLAN_ROUTES.ADDITIONAL_AUTO_ENROLLMENT,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.ENTRYDATE,
    label: "Entry Date",
    path: MANAGE_PLAN_ROUTES.ENTRYDATE,
    contentHeader: "Entrydate",
    breadCrumbs: [],
    childRoutes: [MANAGE_PLAN_ROUTES.SOURCE_ENROLLMENT],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.ROLLOVER,
    label: "Rollovers",
    path: MANAGE_PLAN_ROUTES.ROLLOVER,
    contentHeader: "Rollovers",
    breadCrumbs: [],
    childRoutes: [MANAGE_PLAN_ROUTES.ROLLOVER],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.RETIREMENT,
    label: "Retirement",
    path: MANAGE_PLAN_ROUTES.MANAGE_RETIREMENT,
    contentHeader: "Retirement",
    breadCrumbs: [],
    childRoutes: [],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.COMPENSATION,
    label: "Compensation",
    path: MANAGE_PLAN_ROUTES.MANAGE_COMPENSATION,
    contentHeader: "Compensation",
    breadCrumbs: [],
    childRoutes: [MANAGE_PLAN_ROUTES.MANAGE_SOURCE_COMPENSATION],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.DISTRIBUTIONS,
    label: "Distributions",
    path: MANAGE_PLAN_ROUTES.DISTRIBUTIONS,
    contentHeader: "Distributions",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.DISTRIBUTIONS,
      MANAGE_PLAN_ROUTES.ADD_DISTRIBUTIONS,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.TRANSFERS,
    label: "Transfers",
    path: MANAGE_PLAN_ROUTES.TRANSFER,
    contentHeader: "Transfers",
    breadCrumbs: [],
    childRoutes: [],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.LOANS,
    label: "Loans",
    path: MANAGE_PLAN_ROUTES.LOANS,
    contentHeader: "Loans",
    breadCrumbs: [],
    childRoutes: [MANAGE_PLAN_ROUTES.ADD_LOANS],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.INVESTMENTS,
    label: "Investments",
    path: MANAGE_PLAN_ROUTES.MANAGE_INVESTMENTS_PLAN,
    contentHeader: "Manage Investments",
    breadCrumbs: [],
    childRoutes: [
      MANAGE_PLAN_ROUTES.MANAGE_INVESTMENTS_MASTER,
      MANAGE_PLAN_ROUTES.ADD_INVESTMENTS,
      MANAGE_PLAN_ROUTES.ADD_INVESTMENTS_RESTRICTIONS,
      MANAGE_PLAN_ROUTES.VIEW_RESTRICTIONS_HISTORY,
    ],
  },
  {
    id: REVIEW_SCREEN_DATA_MAPPING.IRSLIMIT,
    label: "IRS Limit",
    path: MANAGE_PLAN_ROUTES.IRSLIMIT,
    contentHeader: "IRS LIMITS",
    breadCrumbs: [],
    childRoutes: [],
  },
  {
    id: "review",
    label: "Review",
    path: MANAGE_PLAN_ROUTES.REVIEW,
    contentHeader: "Plan Status",
    breadCrumbs: [],
    childRoutes: [],
  },
];

export const ALL_MANAGE_PLAN_ROUTES = [
  ...MANAGE_PLAN_MENU,
  {
    contentHeader: "Basic Details",
    path: MANAGE_PLAN_ROUTES.BASIC_DETAILS,
    breadCrumbs: [
      {
        label: "Basic Details",
        link: MANAGE_PLAN_ROUTES.BASIC_DETAILS,
      },
    ],
  },
  {
    contentHeader: "Sponsor",
    path: MANAGE_PLAN_ROUTES.SPONSOR,
    breadCrumbs: [
      {
        label: "Sponsor",
        link: MANAGE_PLAN_ROUTES.SPONSOR,
      },
    ],
  },
  {
    contentHeader: "Add Sponsor",
    path: MANAGE_PLAN_ROUTES.ADD_SPONSOR,
    breadCrumbs: [
      {
        label: "Manage Sponsor",
        link: MANAGE_PLAN_ROUTES.SPONSOR,
      },
    ],
  },
  {
    contentHeader: "Information Sponsor",
    path: MANAGE_PLAN_ROUTES.SPONSOR_INFORMATION,
    breadCrumbs: [],
  },
  {
    contentHeader: "Manage Trustee",
    path: MANAGE_PLAN_ROUTES.TRUSTEE,
    breadCrumbs: [],
  },
  {
    contentHeader: "Add Trustee",
    path: MANAGE_PLAN_ROUTES.ADD_TRUSTEE,
    breadCrumbs: [
      {
        label: "Manage Trustee",
        link: MANAGE_PLAN_ROUTES.TRUSTEE,
      },
    ],
  },
  {
    contentHeader: "Add Trustee",
    path: MANAGE_PLAN_ROUTES.ADD_TRUSTEE_MASTER,
    breadCrumbs: [],
  },
  {
    contentHeader: "Manage Trustee",
    path: MANAGE_PLAN_ROUTES.MANAGE_TRUSTEE,
    breadCrumbs: [],
  },
  {
    contentHeader: "Custodian",
    path: MANAGE_PLAN_ROUTES.CUSTODIAN,
    breadCrumbs: [],
  },
  {
    contentHeader: "Add Custodian",
    path: MANAGE_PLAN_ROUTES.ADD_CUSTODIAN,
    breadCrumbs: [
      {
        label: "Manage Custodian",
        link: MANAGE_PLAN_ROUTES.CUSTODIAN,
      },
    ],
  },
  {
    contentHeader: "Add Custodian",
    path: MANAGE_PLAN_ROUTES.ADD_CUSTODIAN_MASTER,
    breadCrumbs: [
      {
        label: "Add Custodian",
        link: MANAGE_PLAN_ROUTES.ADD_CUSTODIAN_MASTER,
      },
    ],
  },
  {
    contentHeader: "Manage Custodian",
    path: MANAGE_PLAN_ROUTES.MANAGE_CUSTODIAN,
    breadCrumbs: [],
  },
  {
    contentHeader: "Manage Advisor",
    path: MANAGE_PLAN_ROUTES.ADVISOR,
    breadCrumbs: [],
  },
  {
    contentHeader: "Add Advisor",
    path: MANAGE_PLAN_ROUTES.ADD_ADVISOR,
    breadCrumbs: [
      {
        label: "Manage Advisor",
        link: MANAGE_PLAN_ROUTES.ADVISOR,
      },
    ],
  },
  {
    contentHeader: "Add Advisor",
    path: MANAGE_PLAN_ROUTES.ADD_ADVISOR_MASTER,
    breadCrumbs: [],
  },
  {
    contentHeader: "Manage Advisor",
    path: MANAGE_PLAN_ROUTES.MANAGE_ADVISOR,
    breadCrumbs: [],
  },
  {
    label: "",
    path: MANAGE_PLAN_ROUTES.MANAGE_SOURCES_MASTER,
    contentHeader: "Manage Sources",
    breadCrumbs: [],
    childRoutes: [],
  },
  {
    label: "",
    path: MANAGE_PLAN_ROUTES.MANAGE_SOURCES_NEW,
    contentHeader: "Add Sources",
    breadCrumbs: [
      {
        label: "Manage Sources",
        link: MANAGE_PLAN_ROUTES.MANAGE_SOURCES,
      },
    ],
    childRoutes: [],
  },
  {
    label: "",
    path: MANAGE_PLAN_ROUTES.VIEW_SOURCES_MASTER,
    contentHeader: "Source",
    breadCrumbs: [
      {
        label: "Manage Sources",
        link: MANAGE_PLAN_ROUTES.MANAGE_SOURCES,
      },
    ],
    childRoutes: [],
  },
  {
    label: "",
    path: MANAGE_PLAN_ROUTES.MANAGE_SOURCES_HISTORY,
    contentHeader: "History",
    breadCrumbs: [
      {
        label: "Manage Sources",
        link: MANAGE_PLAN_ROUTES.MANAGE_SOURCES,
      },
    ],
    childRoutes: [],
  },
  {
    label: "",
    path: MANAGE_PLAN_ROUTES.MANAGE_SOURCES_ADD_ADDITIONAL_RULES,
    contentHeader: "Additional Allocation Rule",
    breadCrumbs: [
      {
        label: "Manage Sources",
        link: MANAGE_PLAN_ROUTES.MANAGE_SOURCES,
      },
      {
        label: "Sources",
        link: MANAGE_PLAN_ROUTES.MANAGE_SOURCES_MASTER, // TODO: Map to sources screen
      },
    ],
    childRoutes: [],
  },
  {
    contentHeader: "Eligibility",
    path: MANAGE_PLAN_ROUTES.ELIGIBILITY,
    breadCrumbs: [
      {
        label: "Eligibility",
        link: MANAGE_PLAN_ROUTES.ELIGIBILITY,
      },
    ],
  },
  {
    contentHeader: "Add Eligibility Rule",
    path: MANAGE_PLAN_ROUTES.ADD_ELIGIBILITY,
    breadCrumbs: [
      {
        label: "Eligibility",
        link: MANAGE_PLAN_ROUTES.ELIGIBILITY,
      },
    ],
  },
  {
    contentHeader: "Additional Eligibility Rule",
    path: MANAGE_PLAN_ROUTES.ADDITIONAL_ELIGIBILITY_RULE,
    breadCrumbs: [
      {
        label: "Eligibility",
        link: MANAGE_PLAN_ROUTES.ELIGIBILITY,
      },
      {
        label: "Eligibility Rule",
        link: MANAGE_PLAN_ROUTES.ADD_ELIGIBILITY,
      },
    ],
  },
  {
    contentHeader: "Add Source Compensation",
    path: MANAGE_PLAN_ROUTES.MANAGE_SOURCE_COMPENSATION,
    breadCrumbs: [
      {
        label: "Compensation",
        link: MANAGE_PLAN_ROUTES.MANAGE_COMPENSATION,
      },
      {
        lable: "Source Compensation",
        link: MANAGE_PLAN_ROUTES.MANAGE_SOURCE_COMPENSATION,
      },
    ],
  },
  {
    contentHeader: "Allocations",
    path: MANAGE_PLAN_ROUTES.ALLOCATION,
    breadCrumbs: [
      {
        label: "Allocations",
        link: MANAGE_PLAN_ROUTES.ALLOCATION,
      },
    ],
  },
  {
    contentHeader: "Allocations",
    path: MANAGE_PLAN_ROUTES.ADD_SOURCE_ALLOCATION,
    breadCrumbs: [
      {
        label: "Add Source Allocation",
        link: MANAGE_PLAN_ROUTES.ADD_SOURCE_ALLOCATION,
      },
    ],
  },
  {
    contentHeader: "Vesting",
    path: MANAGE_PLAN_ROUTES.VESTING,
    breadCrumbs: [
      {
        label: "Vesting",
        link: MANAGE_PLAN_ROUTES.VESTING,
      },
    ],
  },
  {
    contentHeader: "Vesting",
    path: MANAGE_PLAN_ROUTES.ADD_VESTING,
    breadCrumbs: [
      {
        label: "Add Vesting",
        link: MANAGE_PLAN_ROUTES.ADD_VESTING,
      },
    ],
  },
  {
    contentHeader: "Additonal Vesting",
    path: MANAGE_PLAN_ROUTES.ADD_VESTING_RULE,
    breadCrumbs: [
      {
        label: "Add Vesting Rule",
        link: MANAGE_PLAN_ROUTES.ADD_VESTING,
      },
    ],
  },
  {
    path: MANAGE_PLAN_ROUTES.MANAGE_FUNDING_DETAIL,
    contentHeader: "Funding",
    breadCrumbs: [
      {
        label: "Manage Fundings",
        link: MANAGE_PLAN_ROUTES.MANAGE_FUNDING,
      },
    ],
    childRoutes: [],
  },
  {
    contentHeader: "Enrollment",
    path: MANAGE_PLAN_ROUTES.ENROLLMENT,
    breadCrumbs: [
      {
        label: "Enrollment",
        link: MANAGE_PLAN_ROUTES.ENROLLMENT,
      },
    ],
  },
  {
    contentHeader: "Enrollment1",
    path: MANAGE_PLAN_ROUTES.ENROLLMENT1,
    breadCrumbs: [
      {
        label: "Enrollment1",
        link: MANAGE_PLAN_ROUTES.ENROLLMENT1,
      },
    ],
  },
  {
    contentHeader: "Add Source Entry Date",
    path: MANAGE_PLAN_ROUTES.SOURCE_ENROLLMENT,
    breadCrumbs: [
      {
        label: "EntryDate",
        link: MANAGE_PLAN_ROUTES.ENTRYDATE,
      },
    ],
  },
  {
    contentHeader: "Additional Auto Enrollment",
    path: MANAGE_PLAN_ROUTES.ADDITIONAL_AUTO_ENROLLMENT,
    breadCrumbs: [
      {
        label: "Enrollment",
        link: MANAGE_PLAN_ROUTES.ENROLLMENT,
      },
    ],
  },
  {
    contentHeader: "Rollovers",
    path: MANAGE_PLAN_ROUTES.ROLLOVER,
    breadCrumbs: [
      {
        label: "Rollovers",
        link: MANAGE_PLAN_ROUTES.ROLLOVER,
      },
    ],
  },
  {
    path: MANAGE_PLAN_ROUTES.MANAGE_SOURCE_COMPENSATION,
    contentHeader: "Add Source Compensation",
    breadCrumbs: [
      {
        label: "Compensation",
        link: MANAGE_PLAN_ROUTES.MANAGE_COMPENSATION,
      },
    ],
    childRoutes: [],
  },
  {
    path: MANAGE_PLAN_ROUTES.DISTRIBUTIONS,
    contentHeader: "Distributions",
    breadCrumbs: [
      {
        label: "Distributions",
        link: MANAGE_PLAN_ROUTES.DISTRIBUTIONS,
      },
    ],
    childRoutes: [],
  },
  {
    path: MANAGE_PLAN_ROUTES.ADD_DISTRIBUTIONS,
    contentHeader: "Add Distribution",
    breadCrumbs: [
      {
        label: "Distributions",
        link: MANAGE_PLAN_ROUTES.DISTRIBUTIONS,
      },
    ],
    childRoutes: [],
  },
  {
    path: MANAGE_PLAN_ROUTES.LOANS,
    contentHeader: "Loans",
    breadCrumbs: [
      {
        label: "Loans",
        link: MANAGE_PLAN_ROUTES.LOANS,
      },
    ],
    childRoutes: [],
  },
  {
    path: MANAGE_PLAN_ROUTES.MANAGE_INVESTMENTS_MASTER,
    contentHeader: "Manage Investments",
    breadCrumbs: [],
    childRoutes: [],
  },
  {
    path: MANAGE_PLAN_ROUTES.ADD_INVESTMENTS,
    contentHeader: "Add Investments",
    breadCrumbs: [
      {
        label: "Manage Investments",
        link: MANAGE_PLAN_ROUTES.MANAGE_INVESTMENTS_PLAN,
      },
    ],
    childRoutes: [],
  },
  {
    path: MANAGE_PLAN_ROUTES.ADD_INVESTMENTS_RESTRICTIONS,
    contentHeader: "Restrictions",
    breadCrumbs: [
      {
        label: "Manage Investments",
        link: MANAGE_PLAN_ROUTES.MANAGE_INVESTMENTS_PLAN,
      },
    ],
    childRoutes: [],
  },
  {
    path: MANAGE_PLAN_ROUTES.ADD_LOANS,
    contentHeader: "Add Loan",
    breadCrumbs: [
      {
        label: "Add Loan",
        link: MANAGE_PLAN_ROUTES.ADD_LOANS,
      },
    ],
  },
];

export const managePlanFormNames = {
  CREATE_PLAN: "create_plan",
  ADD_SPONSOR_MANAGE_PLAN: "Add_sponsor",
  BASIC_DETAILS_MANAGE_PLAN: "Basic_Details",
  ADD_TRUSTEE_MANAGE_PLAN: "Add_trustee",
  ADD_CUSTODIAN_MANAGE_PLAN: "Add_custodian",
  ADD_ADVISOR_MANAGE_PLAN: "Add_advisor",
  ADD_COMPLAINCE: "Add_complaince",
  ADD_ELIGIBILITY: "Add_Eligibility",
  ADDITIONAL_ELIGIBILITY_RULE: "Additional_Eligibility_Rule",
  BASIC_SOURCES: "basicsources_plan",
  SOURCES_ADDITIONAL_RULES: "sourcesadditinalrules_plan",
  ALLOCATION: "allocation",
  SOURCES_ALLOCATION: "sources_allocation",
  ADD_VESTING: "add_vesting",
  ADD_VESTING_RULE: "add_vesting_rule",
  FUNDING_DETAIL: "fundings_plan",
  ADD_ENROLLMENT: "add_enrollment",
  ENROLLMENT_DETAIL_REPORT: "enrollment_detail_report",
  ADD_AUTO_ENROLLMENT: "auto_enrollment",
  ADD_ADDITIONAL_AUTO_ENROLLMENT: "additional_auto_enrollment",
  ADD_SOURCE_ENROLLMENT: "add_source_enrollment",
  ADD_ROLLOVERS: "add_rollovers",
  MANAGE_RETIREMENT: "manageretirement_plan",
  MANAGE_COMPENSATION: "managecompensation_plan",
  MANAGE_PLAN_COMPENSATION_CATEGORY: "plancompensationcategory_plan",
  MANAGE_SOURCE_COMPENSATION: "managesourcecompensation_plan",
  ADD_DISTRIBUTIONS: "add_distributions",
  ADD_TRANSFER: "add_transfer",
  ADD_INVESTMENT: "add_investment",
  ADD_INVESTMENT_RESTRICTIONS: "add_investment_restrictions",
  ADD_LOANS: "add loans",
};

export const planFormFields = {
  [managePlanFormNames.CREATE_PLAN]: {
    category: "category",
    planType: "planType",
    prototype: "prototype",
    companyId: "companyId",
    companyName: "companyName",
    planName: "planName",
    rkPlanNumber: "rkPlanNumber",
    level: "level",
    AECompany: "AECompany",
    mepPlanId: "mEPPlanId",
    sponsoringOrganisation: "sponsoringOrganisation",
    sponsoringOrganisationId: "sponsoringOrganisationId",
  },
  [managePlanFormNames.ADD_SPONSOR_MANAGE_PLAN]: {
    ssn: "ssn",
    firstName: "firstName",
    middleName: "middleName",
    lastName: "lastName",
    email: "email",
    mobilePhoneNumber: "mobilePhoneNumber",
    workPhoneNumber: "workPhoneNumber",
    website: "website",
  },
  [managePlanFormNames.BASIC_DETAILS_MANAGE_PLAN]: {
    planName: "planName",
    startDate: "startDate",
    endDate: "endDate",
    yearStartMonth: "yearStartMonth",
    yearStartDate: "yearStartDate",
    yearEndMonth: "yearEndMonth",
    yearEndDate: "yearEndDate",
    effectiveDate: "effectiveDate",
    planTerminationDate: "planTerminationDate",
    shortYearIndicator: "shortYearIndicator",
    shortYearStartDate: "shortYearStartDate",
    shortYearEndDate: "shortYearEndDate",
    irsPlanNumber: "irsPlanNumber",
    trsContractId: "trsContractId",
    name: "name",
    mobilePhoneNumber: "mobilePhoneNumber",
    email: "email",
    planAdministratorId: "planAdministratorId",
    planAdministrator: "planAdministrator",
    rkPlanNumber: "rkPlanNumber",
  },
  [managePlanFormNames.ADD_TRUSTEE_MANAGE_PLAN]: {
    trusteeCompanyName: "trusteeCompanyName",
    email: "email",
    mobilePhoneNumber: "mobilePhoneNumber",
    workPhoneNumber: "workPhoneNumber",
    website: "website",
    level: "level",
    addToMaster: "addToMaster",
  },
  [managePlanFormNames.ADD_CUSTODIAN_MANAGE_PLAN]: {
    custodianCompanyName: "custodianCompanyName",
    email: "email",
    mobilePhoneNumber: "mobilePhoneNumber",
    workPhoneNumber: "workPhoneNumber",
    website: "website",
    level: "level",
    addToMaster: "addToMaster",
  },
  [managePlanFormNames.ADD_ADVISOR_MANAGE_PLAN]: {
    advisorCompanyName: "advisorCompanyName",
    email: "email",
    mobilePhoneNumber: "mobilePhoneNumber",
    workPhoneNumber: "workPhoneNumber",
    website: "website",
    level: "level",
    addToMaster: "addToMaster",
  },
  [managePlanFormNames.ADD_COMPLAINCE]: {
    testingType: "testingType",
    testingMethod: "testingMethod",
    hceIndicator: "hceIndicator",
    qmac: "qmac",
    qnec: "qnec",
    safeHarbourIndicator: "safeHarbourIndicator",
    form5500DueDate: "form5500DueDate",
    month: "month",
    day: "day",
  },
  [managePlanFormNames.ADD_ELIGIBILITY]: {
    eligibilityRule: "eligibilityRuleFor",
    eligibilityName: "name",
    eligibilityDescription: "description",
    exclusionType: "exclusionType",
    hire: "hire",
    startDate: "startDate",
    endDate: "endDate",
    immediateEligibility: "immediateEligibility",
    employeePopulation: "isRevaluationRequired",
    isBreakInService: "isBreakInService",
    applicableEligibilityRequirement: "eligibilityType",
    yearsOfServiceDefinition: "yearsOfServiceDefinition",
    otherComputationalMonths: "months",
    eligibilityOption: "eligibilityOption",
    age: "age",
    hours: "hours",
    activeEmployee: "activeEmployee",
    disabledEmployee: "disabledEmployee",
    deceasedEmployee: "deceasedEmployee",
    retiredEmployee: "retiredEmployee",
    daily: "dailyHours",
    weekly: "weeklyHours",
    biweekly: "biWeeklyHours",
    semiMonthly: "semiMonthlyHours",
    monthly: "monthlyHours",
    quarterly: "quarterlyHours",
    semiAnnually: "semiAnnuallyHours",
    annually: "annuallyHours",
    eligibilityCalculationPeriod: "eligibilityCalculationPeriod",
    yearsOfServiceRequirement: "yearsOfServiceRequirement",
    serviceCreditPeriod: "serviceCreditPeriod",
    consecutiveBreaksInService: "consecutiveBreaksInService",
    breakInServiceDefinition: "breakInServiceDefinition",
    sourceEligibilities: "sourceEligibilities",
    hiredOnOrAfterDate: "hiredOnOrAfterDate",
    hiredOnOrBeforeDate: "hiredOnOrBeforeDate",
    // lengthOfServiceRequirement: "lengthOfServiceRequirement",
    monthsYearDropdown: "monthsYearDropdown",
    lengthOfService: "lengthOfService",
    period: "period",
    eligibilityBreakInServices: "eligibilityBreakInServices",
    additionalEligibilityRules: "additionalEligibilityRules",
    excludedClassifications: "excludedClassifications",
  },
  [managePlanFormNames.ADDITIONAL_ELIGIBILITY_RULE]: {
    excludedClassifications: "excludedClassifications",
    eligibilityDescription: "description",
    effectiveStartDate: "effectiveStartDate",
    effectiveEndDate: "effectiveEndDate",
    exclusionType: "exclusionType",
    hours: "hours",
    otherComputationalMonths: "months",
    applicableEligibilityRequirement: "eligibilityType",
    age: "age",
    yearsOfServiceDefinition: "yearsOfServiceDefinition",
    eligibilityOption: "eligibilityOption",
    hireDateType: "hireDateType",
    startDate: "startDate",
    endDate: "endDate",
    daily: "dailyHours",
    weekly: "weeklyHours",
    biweekly: "biWeeklyHours",
    semiMonthly: "semiMonthlyHours",
    monthly: "monthlyHours",
    quarterly: "quarterlyHours",
    semiAnnually: "semiAnnuallyHours",
    annually: "annuallyHours",
    eligibilityCalculationPeriod: "eligibilityCalculationPeriod",
    yearsOfServiceRequirement: "yearsOfServiceRequirement",
    serviceCreditPeriod: "serviceCreditPeriod",
    consecutiveBreaksInService: "consecutiveBreaksInService",
    breakInServiceDefinition: "breakInServiceDefinition",
    sourceEligibilities: "sourceEligibilities",
    startHireDate: "startHireDate",
    endHireDate: "endHireDate",
    period: "period",
    exclusionRuleId: "exclusionRuleId",
    monthsYearDropdown: "monthsYearDropdown",
    lengthOfService: "lengthOfService",
    immediateEligibility: "immediateEligibility",
    employeePopulation: "employeePopulation",
    isBreakInService: "isBreakInService",
  },
  [managePlanFormNames.BASIC_SOURCES]: {
    sourceType: "sourceType",
    sourceCategory: "sourceCategory",
    sourceSubCategory: "sourceSubCategory",
    sourceSubSubCategory: "sourceSubSubCategory",
    sourceName: "sourceName",
    recordKeepingNumber: "recordKeepingNumber",
    effectiveStartDate: "effectiveStartDate",
    effectiveEndDate: "effectiveEndDate",
    isNewContributionAllowed: "isNewContributionAllowed",
    isDisplayToParticipantWebsite: "isDisplayToParticipantWebsite",
    isContributionManatory: "isContributionManatory",
    contributionType: "contributionType",
    limitMinimum: "limitMinimum",
    limitMaximum: "limitMaximum",
    maximumDollarCompensation: "maximumDollarCompensation",
    rehireDeferralPercentage: "rehireDeferralPercentage",
    contributionMethod: "contributionMethod",
    allocationPercForRehires: "allocationPercForRehires",
    otherPercForRehires: "otherPercForRehires",
    shouldEnrollInAdiProgramme: "shouldEnrollInAdiProgramme",
    adiApplicableTo: "adiApplicableTo",
    periodOfIncrease: "periodOfIncrease",
    autoDeferralIncrease: "autoDeferralIncrease",
    maximumADI: "maximumADI",
    subjectToAutoEnrollment: "subjectToAutoEnrollment",
    defaultContributionForAutoEnrollment:
      "defaultContributionForAutoEnrollment",
    enrollmentType: "enrollmentType",
    responsibleMode: "responsibleMode",
    eligiblePaymentType: "eligiblePaymentType",
    employerContributionType: "employerContributionType",
    percentageOfCompensation: "percentageOfCompensation",
    periodForCalculation: "periodForCalculation",
    periodForMatchCalculation: "periodForMatchCalculation",
    sourceOfMatch: "sourceOfMatch",
    isSafeHarbourMatch: "isSafeHarbourMatch",
    isCalculationSuspended: "isCalculationSuspended",
    isCatchApplicable: "isCatchApplicable",
    isTrueUpApplicable: "isTrueUpApplicable",
    isThresholdApplicable: "isThresholdApplicable",
    safeHarbourType: "safeHarbourType",
    enhancedshMatchPercentage: "enhancedshMatchPercentage",
    uptoPercentageOfDeferral: "uptoPercentageOfDeferral",
    percentageOfCalculation: "percentageOfCalculation",
    percentageOfCompensationMatched: "percentageOfCompensationMatched",
    firstTierMatchPercent: "firstTierMatchPercent",
    secondTierMatchPercent: "secondTierMatchPercent",
    thirdTierMatchPercent: "thirdTierMatchPercent",
    firstTierCompensationMatchPercent: "firstTierCompensationMatchPercent",
    secondTierCompensationMatchPercent: "secondTierCompensationMatchPercent",
    thirdTierCompensationMatchPercent: "thirdTierCompensationMatchPercent",
    employeeGroupsApplicable: "employeeGroupsApplicable",
    qmacType: "qmacType",
    qmacBefore1989: "qmacBefore1989",
    qnecBefore1989: "qnecBefore1989",
    additionalDeferralSource: "additionalDeferralSource",
    isLastDayRuleApplicable: "isLastDayRuleApplicable",
    employmentStatus: "employmentStatus",
    additionalMatchSources: "additionalMatchSources",
    additionalDiscretionarySources: "additionalDiscretionarySources",
  },
  [managePlanFormNames.SOURCES_ADDITIONAL_RULES]: {
    isContributionManatory: "isContributionManatory",
    contributionType: "contributionType",
    limitMaximum: "limitMaximum",
    limitMinimum: "limitMinimum",
    maximumDollarCompensation: "maximumDollarCompensation",
    rehireDeferralPercentage: "rehireDeferralPercentage",
    allocationPercForRehires: "allocationPercForRehires",
    shouldEnrollInAdiProgramme: "shouldEnrollInAdiProgramme",
    adiApplicableTo: "adiApplicableTo",
    periodOfIncrease: "periodOfIncrease",
    autoDeferralIncrease: "autoDeferralIncrease",
    maximumADI: "maximumADI",
    subjectToAutoEnrollment: "subjectToAutoEnrollment",
    defaultContributionForAutoEnrollment:
      "defaultContributionForAutoEnrollment",
    enrollmentType: "enrollmentType",
    allocationForumlaDesc: "allocationFormulaDescription",
    allocationEffectiveStartDate: "allocationEffectiveStartDate",
    allocationEffectiveEndDate: "allocationEffectiveEndDate",
    allocationFormulaAppliesTo: "allocationFormulaAppliesTo",
    availableEmployeeClassifications: "availableEmployeeClassifications",
    employerContributionType: "employerContributionType",
    percentageOfCompensation: "percentageOfCompensation",
    periodForCalculation: "periodForCalculation",
    periodForMatchCalculation: "periodForMatchCalculation",
    sourceType: "sourceType",
    sourceCategory: "sourceCategory",
    sourceSubCategory: "sourceSubCategory",
    sourceName: "sourceName",
    recordKeepingNumber: "recordKeepingNumber",
    effectiveStartDate: "effectiveStartDate",
    isNewContributionAllowed: "isNewContributionAllowed",
    isDisplayToParticipantWebsite: "isDisplayToParticipantWebsite",
    contributionMethod: "contributionMethod",
    otherPercForRehires: "otherPercForRehires",
    responsibleMode: "responsibleMode",
    eligiblePaymentType: "eligiblePaymentType",
    sourceOfMatch: "sourceOfMatch",
    isSafeHarbourMatch: "isSafeHarbourMatch",
    isCalculationSuspended: "isCalculationSuspended",
    isCatchApplicable: "isCatchApplicable",
    isTrueUpApplicable: "isTrueUpApplicable",
    safeHarbourType: "safeHarbourType",
    enhancedshMatchPercentage: "enhancedshMatchPercentage",
    uptoPercentageOfDeferral: "uptoPercentageOfDeferral",
    percentageOfCalculation: "percentageOfCalculation",
    percentageOfCompensationMatched: "percentageOfCompensationMatched",
    firstTierMatchPercent: "firstTierMatchPercent",
    secondTierMatchPercent: "secondTierMatchPercent",
    thirdTierMatchPercent: "thirdTierMatchPercent",
    firstTierCompensationMatchPercent: "firstTierCompensationMatchPercent",
    secondTierCompensationMatchPercent: "secondTierCompensationMatchPercent",
    thirdTierCompensationMatchPercent: "thirdTierCompensationMatchPercent",
    employeeGroupsApplicable: "employeeGroupsApplicable",
    qmacType: "qmacType",
    qmacBefore1989: "qmacBefore1989",
    qnecBefore1989: "qnecBefore1989",
    isLastDayRuleApplicable: "isLastDayRuleApplicable",
  },
  [managePlanFormNames.ALLOCATION]: {
    increments: "increments",
    frequencyOfIncrements: "frequencyOfIncrements",
    frequencyOfChanges: "frequencyOfChanges",
    doesInvestmentAllocationDifferBySource:
      "doesInvestmentAllocationDifferBySource",
    doesInvestmentsApplicableDifferBySource:
      "doesInvestmentsApplicableDifferBySource",
  },
  [managePlanFormNames.SOURCES_ALLOCATION]: {
    sourceName: "sourceName",
    sourceId: "sourceId",
    allocationIncrement: "allocationIncrement",
    frequencyAllocationChanges: "frequencyOfChange",
    investments: "investments",
  },
  [managePlanFormNames.ADD_VESTING]: {
    vestingName: "vestingName",
    vestingDescription: "vestingDescription",
    yearsOfServiceExcludedIndicator: "yearsOfServiceExcludedIndicator",
    excludedYears: "excludedYears",
    immediateVestingIndicator: "immediateVestingIndicator",
    vestingMethod: "vestingMethod",
    vestedAt: "vestedAt",
    hoursOfService: "hoursOfService",
    elapsedTime: "elapsedTime",
    computationPeriod: "computationPeriod",
    vestingSchedule: "vestingSchedule",
    forfeitureTimings: "forfeitureTimings",
    forfeitureTreatment: "forfeitureTreatment",
    defaultInvestmentId: "defaultInvestmentId",
    breakInServiceApplicable: "breakInServiceApplicable",
    breakInServiceRules: "breakInServiceRules",
    hours: "hours",
    disregardYearsOfServiceAfterHowManyBreakInService:
      "disregardYearsOfServiceAfterHowManyBreakInService",
    freezeVestingPercentageAfterHowManyBreakInService:
      "freezeVestingPercentageAfterHowManyBreakInService",
    firstYear: "firstYear",
    secondYear: "secondYear",
    thirdYear: "thirdYear",
    fourthYear: "fourthYear",
    fifthYear: "fifthYear",
  },
  [managePlanFormNames.ADD_VESTING_RULE]: {
    vestingDescription: "description",
    vestingEffectiveStartDate: "startDate",
    vestingEffectiveEnddate: "endDate",
    vestingOption: "vestingOption",
    additionalVestingDescription: "additionalVestingDescription",
    hirePeriod: "hirePeriod",
    hireStartDate: "hireStartDate",
    hireEndDate: "hireEndDate",
    hireDate: "hireDate",
    participationPeriod: "participationPeriod",
    participationStartDate: "participationStartDate",
    participationEndDate: "participationEndDate",
    participationDate: "participationDate",
    includedClassifications: "includedClassifications",
    immediateVestingIndicator: "immediateVestingIndicator",
    vestedAt: "vestedAt",
    vestingMethod: "vestingMethod",
    hoursOfService: "hoursOfService",
    elapsedTime: "elapsedTime",
    vestingComputationalPeriod: "vestingComputationalPeriod",
    tablePercentage1: "tablePercentage1",
    tablePercentage2: "tablePercentage2",
    tablePercentage3: "tablePercentage3",
    tablePercentage4: "tablePercentage4",
    tablePercentage5: "tablePercentage5",
  },
  [managePlanFormNames.FUNDING_DETAIL]: {
    bankAccountNumber: "bankAccountNumber",
    abaRoutingNumber: "abaRoutingNumber",
    bankAccountName: "bankAccountName",
    bankAccountType: "bankAccountType",
    bankAccountStatus: "bankAccountStatus",
    defaultBankAccountIndicator: "defaultBankAccountIndicator",
  },
  [managePlanFormNames.ENROLLMENT_DETAIL_REPORT]: {
    searchBySSNEmpIdName: "searchBySSNEmpIdName",
    enrollstatus: "enrollstatus",
    enrollsource: "enrollsource",
  },
  [managePlanFormNames.ADD_AUTO_ENROLLMENT]: {
    subjecttoAutoEnrollment: "subjecttoAutoEnrollment",
    minimumWithdrawallimit: "minimumWithdrawallimit",
    isAutoReEnroll: "isAutoReEnroll",
    isWindowPeriod: "isWindowPeriod",
    dateOfHire: "dateOfHire",
    hiredOnOrBeforeDateEnrollment: "hiredOnOrBeforeDateEnrollment",
    hiredOnOrAfterDateEnrollment: "hiredOnOrAfterDateEnrollment",
    hiredBetweenFrom: "hiredBetweenFrom",
    usePlanDefaultDeferralElection: "usePlanDefaultDeferralElection",
    usePlanDefaultInvestmentElection: "usePlanDefaultInvestmentElection",
    investmentsElection: "investmentsElection",
    hiredBetweenTo: "hiredBetweenTo",
    employmentStatus: "employmentStatus",
    frequencyOptoutIndicator: "frequencyOptoutIndicator",
    exclusionType: "exclusionType",
    excludedEmployeeClassifications: "excludedEmployeeClassifications",
    excludedEmploymentStatuses: "excludedEmploymentStatuses",
    sameInvestmentElectionToAllSources: "sameInvestmentElectionToAllSources",
    sameInvestmentElectionToAllParticipants:
      "sameInvestmentElectionToAllParticipants",
    numberOfDaysWindowIsOpenNumber: "numberOfDaysWindowIsOpenNumber",
    numberOfDaysWindowIsOpen: "numberOfDaysWindowIsOpen",
    numberOfDaysWindowIsOpenReEnrollmentNumber:
      "numberOfDaysWindowIsOpenReEnrollmentNumber",
    numberOfDaysWindowIsOpenReEnrollment:
      "numberOfDaysWindowIsOpenReEnrollment",
    investmentBasedOn: "investmentBasedOn",
    sameInvestmentBasedOn: "sameInvestmentBasedOn",
    birthDateFrom: "birthDateFrom",
    birthDateTo: "birthDateTo",
    RetirementDateFrom: "RetirementDateFrom",
    RetirementDateTo: "RetirementDateTo",
  },

  [managePlanFormNames.ADD_ENROLLMENT]: {
    otherDescription: "otherDescription",
    additionalOtherDescription: "additionalOtherDescription",
    otherEntryDates: "otherEntryDates",
    additionalOtherEntryDates: "additionalOtherEntryDates",
    entryDateRule: "entryDateRule",
    isSwitchToPlanYearHaveDifferentEntryDates:
      "isSwitchToPlanYearHaveDifferentEntryDates",
    additionalEntryDateRule: "additionalEntryDateRule",
    prospectiveOrRetrospective: "prospectiveOrRetrospective",
    isCoincidingApplicable: "isCoincidingApplicable",
    additionalEntryDateRule: "additionalEntryDateRule",
    additionalProspectiveOrRetrospective:
      "additionalProspectiveOrRetrospective",
    isCoincidingApplicableForAdditional: "isCoincidingApplicableForAdditional",
    isAllSourcesFollowSameEntryDates: "isAllSourcesFollowSameEntryDates",
    autoDeferralIncreaseApplicableTo: "autoDeferralIncreaseApplicableTo",
    periodOfIncrease: "periodOfIncrease",
    allocationPercentageforRehire: "allocationPercentageforRehire",
    applyADITo: "applyADITo",
    autoDeferralIncreaseProgram: "autoDeferralIncreaseProgram",
    rehireOtherPercentage: "rehireOtherPercentage",
    exclusionType: "exclusionType",
    hiredBetweenFrom: "hiredBetweenFrom",
    hiredBetweenTo: "hiredBetweenTo",
    hiredOnOrBeforeDateEnrollment: "hiredOnOrBeforeDateEnrollment",
    hiredOnOrAfterDateEnrollment: "hiredOnOrAfterDateEnrollment",
    hiredOnOrBeforeDateAdditionalEnrollment:
      "hiredOnOrBeforeDateAdditionalEnrollment",
    hiredOnOrAfterDateAdditionalEnrollment:
      "hiredOnOrAfterDateAdditionalEnrollment",
    excludedEmploymentStatuses: "excludedEmploymentStatuses",
    excludedEmployeeClassifications: "excludedEmployeeClassifications",
    dateOfHire: "dateOfHire",
    sourceName: "sourceName",
    sourceContribution: "sourceContribution",
    investmentBasedOn: "investmentBasedOn",
    investmentsBasedOn: "investmentsBasedOn",
    sameInvestmentBasedOn: "sameInvestmentBasedOn",
  },

  [managePlanFormNames.ADD_ADDITIONAL_AUTO_ENROLLMENT]: {
    enrollmentDescription: "enrollmentDescription",
    excludedEmploymentStatuses: "excludedEmploymentStatuses",
    excludedEmployeeClassifications: "excludedEmployeeClassifications",
    hiredBetweenFrom: "hiredBetweenFrom",
    hiredBetweenTo: "hiredBetweenTo",
    exclusionType: "exclusionType",
    //additionalEnrollmentOptions: "additionalEnrollmentOptions",
    enrollmentEffectiveStartDate: "enrollmentEffectiveStartDate",
    enrollmentEffectiveEndDate: "enrollmentEffectiveEndDate",
    dateOfHire: "dateOfHire",
    hiredOnOrBeforeDateAdditionalEnrollment:
      "hiredOnOrBeforeDateAdditionalEnrollment",
    hiredOnOrAfterDateAdditionalEnrollment:
      "hiredOnOrAfterDateAdditionalEnrollment",
    usePlanDefaultDeferralElection: "usePlanDefaultDeferralElection",
    usePlanDefaultInvestmentElection: "usePlanDefaultInvestmentElection",
    investmentsElection: "investmentsElection",
    sameInvestmentElectionToAllSources: "sameInvestmentElectionToAllSources",
    sameInvestmentElectionToAllParticipants:
      "sameInvestmentElectionToAllParticipants",
    investmentsBasedOn: "investmentsBasedOn",
    investmentBasedOn: "investmentBasedOn",
    sameInvestmentBasedOn: "sameInvestmentBasedOn",
    birthDateFrom: "birthDateFrom",
    birthDateTo: "birthDateTo",
    RetirementDateFrom: "RetirementDateFrom",
    RetirementDateTo: "RetirementDateTo",
  },

  [managePlanFormNames.ADD_SOURCE_ENROLLMENT]: {
    otherDescription: "otherDescription",
    additionalOtherDescription: "additionalOtherDescription",
    sourceEnrollmentOtherEntryDates: "sourceEnrollmentOtherEntryDates",
    additionalSourceEnrollmentOtherDates:
      "additionalSourceEnrollmentOtherDates",
    sourceId: "sourceId",
    prospectiveOrRetrospective: "prospectiveOrRetrospective",
    isCoincidingApplicable: "isCoincidingApplicable",
    additionalEntryDateRule: "additionalEntryDateRule",
    additionalProspectiveOrRetrospective:
      "additionalProspectiveOrRetrospective",
    isCoincidingApplicableForAdditional: "isCoincidingApplicableForAdditional",
    entryDateRule: "entryDateRule",
    planEntryDate: "planEntryDate",
    isSwitchToPlanYearHaveDifferentEntryDates:
      "isSwitchToPlanYearHaveDifferentEntryDates",
    additionalEntryDateRule: "additionalEntryDateRule",
  },
  [managePlanFormNames.ADD_ROLLOVERS]: {
    rollOversAllowed: "rollOversAllowed",
    rollOversAllowedPriorToDistribution: "rollOversAllowedPriorToDistribution",
    rollOversAllowedPriorToEligibility: "rollOversAllowedPriorToEligibility",
    rollOversAllowedPriorToLoans: "rollOversAllowedPriorToLoans",
  },
  [managePlanFormNames.MANAGE_RETIREMENT]: {
    earlyRetirement: "earlyRetirement",
    earlyAgeYears: "earlyAgeYears",
    earlyAgeMonths: "earlyAgeMonths",
    earlyServiceYears: "earlyServiceYears",
    earlyRetirementDateRule: "earlyRetirementDateRule",
    normalRetirement: "normalRetirement",
    normalAgeYears: "normalAgeYears",
    normalAgeMonths: "normalAgeMonths",
    normalServiceYears: "normalServiceYears",
    normalRetirementDateRule: "normalRetirementDateRule",
  },
  [managePlanFormNames.MANAGE_COMPENSATION]: {
    modeOfHoursAndCompensation: "modeOfHoursAndCompensation",
    definition: "definition",
    isDifferAtClassificationLevel: "isDifferAtClassificationLevel",
    isPreEntry: "isPreEntry",
    isPostSeverance: "isPostSeverance",
    calculationPeriod: "calculationPeriod",
    isDiffersForPlanSources: "isDiffersForPlanSources",
    categoryName: "name",
    employeeClassifications: "employeeClassifications",
    sourceEmployeeClassifications: "sourceEmployeeClassifications",
    calculationType: "calculationType",
  },
  [managePlanFormNames.MANAGE_PLAN_COMPENSATION_CATEGORY]: {
    compensationId: "compensationId",
    compensationCategoryId: "compensationCategoryId",
    name: "name",
    calculationType: "calculationType",
  },
  [managePlanFormNames.MANAGE_POST_SEVERANCE_COMPENSATION_CATEGORY]: {
    compensationId: "compensationId",
    compensationCategoryId: "compensationCategoryId",
    name: "name",
    calculationType: "calculationType",
  },

  [managePlanFormNames.MANAGE_EMPLOYEE_CLASSIFICATION_CATEGORY]: {
    compensationId: "compensationId",
    compensationName: "name",
  },
  [managePlanFormNames.MANAGE_COMPENSATION_CLASSIFICATION]: {
    employeeClasificationCategoryId: "employeeClasificationCategoryId",
    employeeClassificationCodeId: "employeeClassificationCodeId",
    codeValue: "codeValue",
  },
  [managePlanFormNames.MANAGE_COMPENSATION_CLASSIFICATION_CATEGORY]: {
    employeeClasificationCategoryId: "employeeClasificationCategoryId",
    compensationCategoryId: "compensationCategoryId",
    name: "name",
    calculationType: "calculationType",
  },
  [managePlanFormNames.MANAGE_SOURCE_COMPENSATION_CATEGORY]: {
    sourceCompensationId: "sourceCompensationId",
    compensationCategoryId: "compensationCategoryId",
    name: "name",
    calculationType: "calculationType",
  },
  [managePlanFormNames.MANAGE_SOURCE_COMPENSATION_CLASSIFICATION]: {
    sourceCompensationId: "sourceCompensationId",
    employeeClassificationCodeId: "employeeClassificationCodeId",
    codeValue: "codeValue",
  },
  [managePlanFormNames.MANAGE_SOURCE_COMPENSATION_CLASSIFICATION_CATEGORY]: {
    sourceCompensationId: "sourceCompensationId",
    compensationCategoryId: "compensationCategoryId",
    name: "name",
    calculationType: "calculationType",
  },
  [managePlanFormNames.MANAGE_SOURCE_COMPENSATION]: {
    compensationName: "compensationName",
    definition: "definition",
    isDifferAtClassificationLevel: "isDifferAtClassificationLevel",
    isPreEntry: "isPreEntry",
    isDiffersForPlanSources: "isDiffersForPlanSources",
    source_SourceCompensations: "source_SourceCompensations",
  },
  [managePlanFormNames.ADD_DISTRIBUTIONS]: {
    withDrawalType: "withDrawalType",
    withdrawalDescription: "withdrawalDescription",
    ageLimitApplicable: "ageLimitApplicable",
    years: "years",
    months: "months",
    waiveOffLimitApplicable: "waiveOffLimitApplicable",
    waiveOffLimit: "waiveOffLimit",
    minimumWithDrawalLimitAmount: "minimumWithDrawalLimitAmount",
    withdrawalLimitPerPeriod: "withdrawalLimitPerPeriod",
    withdrawalLimitPerPeriodValue: "withdrawalLimitPerPeriodValue",
    numberOfWithdrawalAllowed: "numberOfWithdrawalAllowed",
    processLesserAmountIfMaximumIsNotAvailable:
      "processLesserAmountIfMaximumIsNotAvailable",
    spouseConsentRequired: "spouseConsentRequired",
    sponsorApprovalRequired: "sponsorApprovalRequired",
    availableToBeneficiaries: "availableToBeneficiaries",
    availableToAlternatePayees: "availableToAlternatePayees",
    allowOptingOutOfFederlWithholdingTax:
      "allowOptingOutOfFederlWithholdingTax",
    allowOptingOutOfStateWithholdingTax: "allowOptingOutOfStateWithholdingTax",
    allowChangingOfFederalWithholdingTax:
      "allowChangingOfFederalWithholdingTax",
    allowChangingOfStateWithholdingTax: "allowChangingOfStateWithholdingTax",
    dateOfAnnuityPayments: "dateOfAnnuityPayments",
    interestRate: "interestRate",
    excludedEmployeeClassifications: "excludedEmployeeClassifications",
    excludedEmploymentStatuses: "excludedEmploymentStatuses",
    distributionAllocationMethodCommon: "distributionAllocationMethodCommon",
    distributionAllocationMethodOntimePayment:
      "distributionAllocationMethodOntimePayment",
    orderOfPeriodicPayment: "orderOfPeriodicPayment",
    maximumNumberOfDirectRolloverPayees: "maximumNumberOfDirectRolloverPayees",
    allowParticipantstoChooseFeesDeductedMethod:
      "allowParticipantstoChooseFeesDeductedMethod",
    feesToBeDeductedFrom: "feesToBeDeductedFrom",
    paymentMethod: "paymentMethod",
    eftFee: "eftFee",
    overnightExpressDeliveryFee: "overnightExpressDeliveryFee",
    withdrawalOneTimeOriginateFee: "withdrawalOneTimeOriginateFee",
    rollOverFee: "rollOverFee",
    recurringFee: "recurringFee",
    suspendedSources: "suspendedSources",
    otherHardshipReason: "otherHardshipReason",
    requiresInServiceWithdrawalPriorToHardshipRequest:
      "requiresInServiceWithdrawalPriorToHardshipRequest",
    requiresLoanRequestPriorToHardshipRequest:
      "requiresLoanRequestPriorToHardshipRequest",
    restrictNumberOfHardshipsInDefinedPeriod:
      "restrictNumberOfHardshipsInDefinedPeriod",
    restrictedPeriodValue: "restrictedPeriodValue",
    restrictedPeriodTypeFrequency: "restrictedPeriodTypeFrequency",
    maximumNoOfHardShips: "maximumNoOfHardShips",
    totalMaximumNoOfHardShips: "totalMaximumNoOfHardShips",
    lengthOfSuspensionApplicable: "lengthOfSuspensionApplicable",
    suspensionPeriodYears: "suspensionPeriodYears",
    suspensionPeriodMonths: "suspensionPeriodMonths",
    earlyWaiveOffLimit: "earlyWaiveOffLimit",
    minimumWithdrawalType: "minimumWithdrawalType",
    checkFees: "checkFees",
    hardshipWithdrawalFee: "hardshipWithdrawalFee",
    hardshipReason: "hardshipReason",
    paymentFrequencyApplicable: "paymentFrequencyApplicable",
    calculationMethods: "calculationMethods",
    calculationMethodsApplicable: "calculationMethodsApplicable",
    worksOnSaturday: "worksOnSaturday",
    worksOnSunday: "worksOnSunday",
    startDay: "startDay",
    firstBeginDay: "firstBeginDay",
    secondBeginDay: "secondBeginDay",
    startMonth: "startMonth",
    startMonthFirstQuarter: "startMonthFirstQuarter",
    startMonthFirstHalfYear: "startMonthFirstHalfYear",
    startDateMonth: "startDateMonth",
    startDateDay: "startDateDay",
    minimumWithdrawalLimitValue: "minimumWithdrawalLimitValue",
    defaultPaymentFrequnecyForAutoRMD: "defaultPaymentFrequnecyForAutoRMD",
    withdrawalSources: "withdrawalSources",
    unformattedWithdrawalSources: "unformattedWithdrawalSources",
  },
  [managePlanFormNames.ADD_TRANSFER]: {
    showProspectusWithFirstTransfer: "showProspectusWithFirstTransfer",
    showProsPectusWithEachTransfer: "showProsPectusWithEachTransfer",
    isTransferAllowed: "isTransferAllowed",
    typesPermitted: "typesPermitted",
    pctDollarAmount: "pctDollarAmount",
    isDollarTransferRuleApplicable: "isDollarTransferRuleApplicable",
    isFlexibleTransferAllowed: "isFlexibleTransferAllowed",
    rebalanceAllowed: "rebalanceAllowed",
    rebalanceTypesPermitted: "rebalanceTypesPermitted",
    rebalanceWithoutStockFundInvestment: "rebalanceWithoutStockFundInvestment",
    isAutoRebalanceAllowed: "isAutoRebalanceAllowed",
    timing: "timing",
    isReallocationAllowed: "isReallocationAllowed",
    transferTo: "transferTo",
    transferFrom: "transferFrom",
    rebalanceExcludes: "rebalanceExcludes",
    restrictedSourceCodes: "restrictedSourceCodes",
  },
  [managePlanFormNames.ADD_INVESTMENT]: {
    investmentType: "type",
    investmentCategory: "investmentCategory",
    investmentName: "name",
    investmentDescription: "description",
    investmentStatus: "status",
    fundCode: "fundCode",
    CUSIP: "cusip",
    tickerSymbol: "tickerSymbol",
    shareClass: "shareClass",
    typeOfEarnings: "typeOfEarnings",
    isInvestmentQDIA: "isInvestmentQDIA",
    investmentObjective: "investmentObjective",
    volatility: "volatility",
    isInvestmentOfComputingFundApplicable:
      "isInvestmentOfComputingFundApplicable",
    applicableInvestmentForComputingFund:
      "applicableInvestmentForComputingFund",
    isProspectusDeliveryWith1stTransferApplicable:
      "isProspectusDeliveryWith1stTransferApplicable",
    prospectusDeliveryFrequency: "frequencyOfProspectusDisclaimer",
    prospectusDeliveryMethod: "prospectusDeliveryMethod",
    closureDate: "closureDate",
    inceptionDate: "inceptionDate",
    dividendType: "dividendType",
    dividendProcessingFrequency: "dividendProcessingFrequency",
    modelName: "modelName",
    riskType: "riskType",
    is100PercAllocated: "is100PercAllocated",
    isReallocationAllowed: "isReallocationAllowed",
    isRebalanceAllowed: "isRebalanceAllowed",
    applicableInvestments: "applicableInvestments",
  },
  [managePlanFormNames.ADD_LOANS]: {
    isShared: "isShared",
    loanType: "loanType",
    masterLoanTypeId: "masterLoanTypeId",
    masterLoanType: "masterLoanType",
    loanDescription: "loanDescription",
    numberOfLoansAllowed: "numberOfLoansAllowed",
    loanPerPlanYear: "loanPerPlanYear",
    minimumAmount: "minimumAmount",
    maximumAmount: "maximumAmount",
    maximumAmountPercentageValue: "maximumAmountPercentageValue",
    maximumAmountOtherValue: "maximumAmountOtherValue",
    minimumLength: "minimumLength",
    maximumLengthYears: "maximumLengthYears",
    maximumLengthMonths: "maximumLengthMonths",
    sourceHierarchies: "sourceHierarchies",
    restrictedInvestments: "restrictedInvestments",
    spousalConsentRequired: "spousalConsentRequired",
    sponsorApprovalRequired: "sponsorApprovalRequired",
    refinancingAllowed: "refinancingAllowed",
    processingTimeForLoan: "processingTimeForLoan",
    applicablePaymentMethodsLoan: "applicablePaymentMethods",
    waitingPeriodBetweenLoansPayoffAndLoanRequest:
      "waitingPeriodBetweenLoansPayoffAndLoanRequest",
    curePeriod: "curePeriod",
    curePeriodFixedNumberOfDays: "curePeriodFixedNumberOfDays",
    curePeriodFixedNumberOfDaysForEmployeeTermination:
      "curePeriodFixedNumberOfDaysForEmployeeTermination",
    curePeriodForEmployeeTermination: "curePeriodForEmployeeTermination",
    defaultMethod: "defaultMethod",
    loanReAmortizationAllowed: "loanReAmortizationAllowed",
    loanReAmortizationFee: "loanReAmortizationFee",
    numberOfLoanReAmotizationsAllowed: "numberOfLoanReAmortizationsAllowed",
    loanIncrementAmount: "loanIncrementAmount",
    minimumLoanRepaymentAmount: "minimumLoanRepaymentAmount",
    loanApportioningMethod: "loanApportioningMethod",
    isServiceRequirementApplicable: "isServiceRequirementApplicable",
    serviceRequirementForLoan: "serviceRequirementForLoan",
    serviceRequirementForLoanNumber: "serviceRequirementForLoanNumber",
    allowLoansIfAnotherLoanIsDelinquentDefaultDeemed:
      "allowLoansIfAnotherLoanIsDelinquentDefaultDeemed",
    loanInterestRate: "loanInterestRate",
    loanInterestRateValue: "loanInterestRateValue",
    allowParticipantsToChooseInterestRate:
      "allowParticipantsToChooseInterestRate",
    interestRateMinimum: "interestRateMinimum",
    interestRateMaximum: "interestRateMaximum",
    interestRateUpdateFrequecy: "interestRateUpdateFrequency",
    excludedEmployeeClassifications: "excludedEmployeeClassifications",
    excludedEmploymentStatuses: "excludedEmploymentStatuses",
    allowParticipantsToChooseLoanFeeType:
      "allowParticipantsToChooseLoanFeeType",
    loanFeeTypeDeductedFrom: "loanFeeTypeDeductedFrom",
    feesPaymentMethodsApplicable: "feesPaymentMethodsApplicable",
    checkFee: "checkFee",
    eftFees: "eftFees",
    achFee: "achFee",
    overnightDeliveryFees: "overnightDeliveryFees",
    recurringLoanApplicable: "recurringLoanApplicable",
    recurringLoanFees: "recurringLoanFees",
    timingOfRecurringLoanFee: "timingOfRecurringLoanFee",
    loanFeeAmount: "loanFeeAmount",
    loansAllowed: "loansAllowed",
    daysForLoanDefaultingIndication: "daysForLoanDefaultingIndication",
    withdrawalBasis: "withdrawalBasis",
  },
  [managePlanFormNames.ADD_INVESTMENT_RESTRICTIONS]: {
    effectiveStartDate: "effectiveStartDate",
    effectiveEndDate: "effectiveEndDate",
    applicableTypes: "applicableTypes",
  },
};
