import React from "react";
import { Switch } from "react-router-dom";
import {
  MapAndTransform,
  Aggregate,
  ReviewAndConfirm,
  Ruleset,
  LoadDefinitionHome,
  LoadDefinitionSource,
  AssociatePlans,
  LoadFilter,
  Scheduler,
  TargetContainers,
  VerifyMap,
  Overview,
  FixedLength,
} from "../layouts";

import { MANAGE_MAPPER_ROUTES, ApplicationRoute } from "../utils";

export const ManageMapperRoutes = () => {
  return (
    <Switch>
      <ApplicationRoute
        exact
        path={[
          `${MANAGE_MAPPER_ROUTES.OVERVIEW}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.OVERVIEW}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={Overview}
      />
      <ApplicationRoute
        exact
        path={[
          `${MANAGE_MAPPER_ROUTES.MAP_AND_TRANSFORM}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.MAP_AND_TRANSFORM}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={MapAndTransform}
      />
      <ApplicationRoute
        exact
        path={[
          `${MANAGE_MAPPER_ROUTES.AGGREGATE}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.AGGREGATE}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={Aggregate}
      />
      <ApplicationRoute
        exact
        path={[
          `${MANAGE_MAPPER_ROUTES.REVIEW_AND_CONFIRM}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.REVIEW_AND_CONFIRM}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={ReviewAndConfirm}
      />
      <ApplicationRoute
        exact
        path={[
          `${MANAGE_MAPPER_ROUTES.RULESET}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.RULESET}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={Ruleset}
      />
      <ApplicationRoute
        exact
        path={[
          `${MANAGE_MAPPER_ROUTES.SCHEDULER}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.SCHEDULER}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={Scheduler}
      />
      <ApplicationRoute
        exact
        path={[
          `${MANAGE_MAPPER_ROUTES.BASIC_INFORMATION}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.BASIC_INFORMATION}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={LoadDefinitionHome}
      />
      <ApplicationRoute
        exact
        path={[
          `${MANAGE_MAPPER_ROUTES.SOURCE}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.SOURCE}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={LoadDefinitionSource}
      />
      <ApplicationRoute
        path={[
          `${MANAGE_MAPPER_ROUTES.ASSOCIATEDPLANS}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.ASSOCIATEDPLANS}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={AssociatePlans}
      />
      <ApplicationRoute
        path={[
          `${MANAGE_MAPPER_ROUTES.VERIFY_MAP}/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.VERIFY_MAP}/:flow(add|edit|save)/:profileId?`,
        ]}
        component={VerifyMap}
      />
      <ApplicationRoute
        path={[
          `${MANAGE_MAPPER_ROUTES.FILTER}/:flow(add|edit|save)/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.FILTER}/:profileId?`,
        ]}
        component={LoadFilter}
      />
      <ApplicationRoute
        path={[
          `${MANAGE_MAPPER_ROUTES.TARGET}/:flow(add|edit|save)/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.TARGET}/:profileId?`,
        ]}
        component={TargetContainers}
      />
      <ApplicationRoute
        path={[
          `${MANAGE_MAPPER_ROUTES.FIXED_LENGTH}/:flow(add|edit|save)/:profileId?`,
          `${MANAGE_MAPPER_ROUTES.FIXED_LENGTH}/:profileId?`,
        ]}
        component={FixedLength}
      />
    </Switch>
  );
};
